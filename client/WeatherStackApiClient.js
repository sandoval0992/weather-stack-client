"use strict";

/*!
            +----------------------------------------------------------------+
            |           This class was automatically generated by an npm script                    |
            |               Do not modify the content of this file manually                                  |
            |       Refer to package.json to run the script for client regeneration       |
            +----------------------------------------------------------------+
 */

const baseHttpClient = require("./http/baseHttpClient");
const logger = require("log4js").getLogger("WeatherStackApiClient");

/**
 * @typedef {Object} ClientOptions
 * @property {string} url - base url to connect
 * @property {number} timeout - connection timeout in ms, if not set default timeout is 3000ms
 * @property {number} retryCounter -the retry counter if retry strategy is enabled
 * @property {string|Buffer} sslCert - TLS client cert
 * @property {string|Buffer} sslKey - TLS client key (PKCS8)
 * @property {string} sslPass - TLS client key passphrase
 * @property {string|Buffer} sslCA - TLS ca certificate chain
 * @property {function} fnCbErrorInBody - [Optional] Function CallBack to determine if error in body response for monitoring.
 *
 * The weatherstack API was built to deliver accurate weather data for any application and use case, from real-time and historical weather information all the way to 14-day weather forecasts, supporting all major programming languages.
 * version: 1.0.0
 * @class WeatherStackApiClient
 */

class WeatherStackApiClient extends baseHttpClient {
    /**
     * Constructor
     * @param {ClientOptions} options - client options
     */
    constructor(options) {
        super();

        this.swaggerSpecs = {
            "swagger": "2.0",
            "info": {
                "title": "Weather Stack API",
                "description": "The weatherstack API was built to deliver accurate weather data for any application and use case, from real-time and historical weather information all the way to 14-day weather forecasts, supporting all major programming languages.",
                "termsOfService": "TODO",
                "contact": {
                    "name": "Weather Stack Support",
                    "url": "https://weatherstack.com/contact"
                },
                "version": "1.0.0"
            },
            "host": "api.weatherstack.com",
            "basePath": "/",
            "schemes": ["http"],
            "consumes": ["application/json"],
            "produces": ["application/json"],
            "parameters": {
                "access_key": {
                    "name": "access_key",
                    "in": "query",
                    "description": "Your API access key, which can be found in your acccount dashboard.",
                    "type": "string",
                    "required": true
                },
                "query": {
                    "name": "query",
                    "in": "query",
                    "description": "Use this parameter to pass a single location or multiple semicolon-separated location identifiers to the API.",
                    "type": "string",
                    "required": true
                },
                "units": {
                    "name": "units",
                    "in": "query",
                    "description": "Use this parameter to pass one of the unit identifiers ot the API\n  -m for Metric\n  -s for Scientific\n  -f for Fahrenheit\n",
                    "type": "string",
                    "required": false,
                    "enum": ["m", "s", "f"]
                },
                "language": {
                    "name": "language",
                    "in": "query",
                    "description": "Use this parameter to specify your preferred API response language using its ISO-code. (Default: unset, English)\n",
                    "type": "string",
                    "required": false
                }
            },
            "paths": {
                "/current": {
                    "get": {
                        "description": "To query the weatherstack API for real-time weather data in a location of your choice, simply attach your preferred location to the API's current endpoint",
                        "operationId": "currentWeather",
                        "parameters": [{
                            "$ref": "#/parameters/access_key"
                        }, {
                            "$ref": "#/parameters/query"
                        }],
                        "responses": {
                            "200": {
                                "description": "OK",
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "currentWeatherResponse": {
                                            "$ref": "#/definitions/currentWeatherResponse"
                                        }
                                    }
                                }
                            }
                        },
                        "tags": ["Current Weather"]
                    }
                }
            },
            "definitions": {
                "currentWeatherResponse": {
                    "type": "object",
                    "properties": {
                        "request": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "description": "Returns the type of location lookup used for this request. Possible values: \n  -City\n  -LatLon\n  -IP\n  -Zipcode\n",
                                    "type": "string",
                                    "example": "City",
                                    "enum": ["City", "LatLon", "IP", "Zipcode"]
                                },
                                "query": {
                                    "description": "Returns the exact location identifier query used for this request.",
                                    "type": "string",
                                    "example": "New York, United States of America"
                                },
                                "language": {
                                    "description": "Returns the ISO-Code of the language used for this request.",
                                    "type": "string",
                                    "example": "en"
                                },
                                "unit": {
                                    "description": "Use this parameter to pass one of the unit identifiers ot the API\n  -m for Metric\n  -s for Scientific\n  -f for Fahrenheit\n",
                                    "type": "string",
                                    "example": "m",
                                    "enum": ["m", "s", "f"]
                                }
                            }
                        },
                        "location": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "description": "Returns the name of the location used for this request.",
                                    "type": "string",
                                    "example": "New York"
                                },
                                "country": {
                                    "description": "Returns the country name associated with the location used for this request.",
                                    "type": "string",
                                    "example": "United States of America"
                                },
                                "region": {
                                    "description": "Returns the region name associated with the location used for this request.",
                                    "type": "string",
                                    "example": "New York"
                                },
                                "lat": {
                                    "description": "Returns the latitude coordinate associated with the location used for this request.",
                                    "type": "number",
                                    "example": 40.714
                                },
                                "lon": {
                                    "description": "Returns the longitude coordinate associated with the location used for this request.",
                                    "type": "number",
                                    "example": -74.006
                                },
                                "timezone_id": {
                                    "description": "Returns the local time (as UNIX timestamp) of the location used for this request.",
                                    "type": "string",
                                    "example": "America/New_York"
                                },
                                "localtime": {
                                    "description": "Returns the local time of the location used for this request.",
                                    "type": "string",
                                    "example": "2019-09-07 08"
                                },
                                "localtime_epoch": {
                                    "description": "Returns the local time (as UNIX timestamp) of the location used for this request.",
                                    "type": "number",
                                    "example": 1567844040
                                },
                                "utc_offset": {
                                    "description": "Returns the UTC offset (in hours) of the timezone associated with the location used",
                                    "type": "string",
                                    "example": -4
                                }
                            }
                        },
                        "current": {
                            "type": "object",
                            "properties": {
                                "observation_time": {
                                    "description": "Returns the UTC time for when the returned whether data was collected.",
                                    "type": "string",
                                    "example": "12:14 PM"
                                },
                                "temperature": {
                                    "description": "Returns the temperature in the selected unit.",
                                    "type": "number",
                                    "example": 13,
                                    "default": "Celsius"
                                },
                                "weather_code": {
                                    "description": "Returns the universal weather condition code associated with the current weather condition.",
                                    "type": "number",
                                    "example": 113
                                },
                                "weather_icons": {
                                    "description": "Returns one or more PNG weather icons associated with the current weather condition.",
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": "https://assets.weatherstack.com/images/wsymbols01_png_64/wsymbol_0001_sunny.png"
                                },
                                "weather_descriptions": {
                                    "description": "Returns one or more PNG weather icons associated with the current weather condition.",
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": "Sunny"
                                },
                                "wind_speed": {
                                    "description": "Returns the wind speed in the selected unit.",
                                    "type": "number",
                                    "example": 0,
                                    "default": "kilometers/hour"
                                },
                                "wind_degree": {
                                    "description": "Returns the wind degree.",
                                    "type": "number",
                                    "example": 349
                                },
                                "wind_dir": {
                                    "description": "Returns the wind direction.",
                                    "type": "string",
                                    "example": "N"
                                },
                                "pressure": {
                                    "description": "Returns the air pressure in the selected unit.",
                                    "type": "number",
                                    "example": 1010,
                                    "default": "MB - millibar"
                                },
                                "precip": {
                                    "description": "Returns the precipitation level in the selected unit.",
                                    "type": "number",
                                    "example": 0,
                                    "default": "MM - millimeters"
                                },
                                "humidity": {
                                    "description": "Returns the air humidity level in percentage.",
                                    "type": "number",
                                    "example": 90
                                },
                                "cloudcover": {
                                    "description": "Returns the cloud cover level in percentage.",
                                    "type": "number",
                                    "example": 0
                                },
                                "feelslike": {
                                    "description": "Returns the \"Feels Like\" temperature in the selected unit.",
                                    "type": "number",
                                    "example": 13,
                                    "default": "Celsius"
                                },
                                "uv_index": {
                                    "description": "Returns the UV index associated with the current weather condition.",
                                    "type": "number",
                                    "example": 4
                                },
                                "visibility": {
                                    "description": "Returns the visibility level in the selected unit.",
                                    "type": "number",
                                    "example": 16,
                                    "default": "kilometers"
                                }
                            }
                        }
                    }
                }
            },
            "tags": [{
                "name": "Current Weather"
            }]
        };

    }

    /**
     * To query the weatherstack API for real-time weather data in a location of your choice, simply attach your preferred location to the API's current endpoint
     * @method
     * @name WeatherStackApiClient#currentWeather
     * @param {string} accessKey - Your API access key, which can be found in your acccount dashboard.
     * @param {string} query - Use this parameter to pass a single location or multiple semicolon-separated location identifiers to the API.
     *
     */

    currentWeather(parameters = {}) {

        let uri = 'http://api.weatherstack.com/current';
        let body;
        const queryParameters = {};
        const headers = {};
        const form = {};

        headers["Accept"] = ['application/json'];
        headers["Content-Type"] = ['application/json'];

        if (parameters["accessKey"] !== undefined) {
            queryParameters["access_key"] = parameters["accessKey"];
        }

        if (parameters["accessKey"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: accessKey"));
        }

        if (parameters["query"] !== undefined) {
            queryParameters["query"] = parameters["query"];
        }

        if (parameters["query"] === undefined) {
            return Promise.reject(new Error("Missing required  parameter: query"));
        }

        if (parameters.$queryParameters) {
            Object.keys(parameters.$queryParameters).forEach(function(parameterName) {
                const parameter = parameters.$queryParameters[parameterName];
                queryParameters[parameterName] = parameter;
            });
        }
        if (parameters.$headers) {
            Object.keys(parameters.$headers).forEach(function(headerName) {
                const header = parameters.$headers[headerName];
                headers[headerName] = header;
            });
        }

        const requestOptions = {
            method: "GET",
            uri,
            qs: queryParameters,
            headers,
            body,
            json: true
        };

        if (Object.keys(form).length > 0) {
            requestOptions.form = form;
        }

        return this._sendRequest(requestOptions);
    }
}
module.exports = WeatherStackApiClient;